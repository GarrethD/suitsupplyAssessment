{
	"info": {
		"_postman_id": "53ad2124-7c7a-44c7-b019-14a9bb67a53d",
		"name": "Regres API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16945418"
	},
	"item": [
		{
			"name": "GET List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.id).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{userEndpoint}}/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userEndpoint}}",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single User Schema Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"data\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": {\"type\": \"integer\"},\r",
							"                \"email\": {\"type\": \"string\"},\r",
							"                \"first_name\": {\"type\": \"string\"},\r",
							"                \"last_name\": {\"type\": \"string\"},\r",
							"                \"avatar\": {\"type\": \"string\"}\r",
							"            },\r",
							"            \"required\": [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"]\r",
							"        },\r",
							"        \"support\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"url\": {\"type\": \"string\"},\r",
							"                \"text\": {\"type\": \"string\"}\r",
							"            },\r",
							"            \"required\": [\"url\", \"text\"]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\"data\", \"support\"]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{userEndpoint}}/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userEndpoint}}",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains id and createdAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"leader\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{userEndpoint}}/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userEndpoint}}",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create User From External Data Source",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var userData = pm.iterationData.toObject();\r",
							"pm.variables.set(\"name\", userData.name);\r",
							"pm.variables.set(\"job\", userData.job);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains id and createdAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"job\": \"{{job}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{userEndpoint}}/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userEndpoint}}",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has updatedAt property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('updatedAt');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"zion resident\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/{{userEndpoint}}/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userEndpoint}}",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userEndpoint",
			"value": "users"
		}
	]
}